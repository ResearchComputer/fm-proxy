---
import { getSession } from 'auth-astro/server';
import PageLayout from "@layouts/PageLayout.astro";
import Container from "@components/Container.astro";
import { SITE } from "@consts";

export const prerender = false;

// Check if user is authenticated
const session = await getSession(Astro.request);

// If not authenticated, redirect to home page
if (!session) {
  return Astro.redirect('/');
}

// API key will be fetched client-side to avoid exposing it in the HTML
let apiKey = "Loading...";
---

<PageLayout title="API Key" description="Your personal API key for accessing Research Computer services">
  <Container>
    <div class="space-y-8 py-8">
      <h1 class="animate text-3xl font-bold text-black dark:text-white">Your API Key</h1>
      
      <div class="animate p-6 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-md">
        <div class="mb-4">
          <p class="text-gray-700 dark:text-gray-300 mb-2">Welcome, <span class="font-semibold">{session.user?.name || 'User'}</span>!</p>
          <p class="text-gray-700 dark:text-gray-300">Below is your personal API key for accessing Research Computer services:</p>
        </div>
        
        <div class="relative mt-4 mb-6">
          <div class="flex">
            <input 
              type="text" 
              id="apiKeyDisplay" 
              value={apiKey} 
              readonly 
              class="flex-grow px-4 py-3 border border-gray-300 dark:border-gray-600 rounded-l-md bg-white dark:bg-gray-700 text-gray-900 dark:text-white focus:outline-none"
            />
            <button 
              id="copyButton" 
              class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-r-md transition-colors"
            >
              Copy
            </button>
          </div>
          <div id="copyMessage" class="hidden absolute -bottom-6 left-0 text-green-600 dark:text-green-400 text-sm">
            Copied to clipboard!
          </div>
          <div id="loadingMessage" class="absolute -bottom-6 left-0 text-blue-600 dark:text-blue-400 text-sm">
            Loading your API key...
          </div>
          <div id="errorMessage" class="hidden absolute -bottom-6 left-0 text-red-600 dark:text-red-400 text-sm">
            Error loading API key. Please refresh and try again.
          </div>
        </div>
        
        <div class="mt-8">
          <h2 class="text-xl font-semibold text-black dark:text-white mb-3">How to use your API key</h2>
          <div class="space-y-4 text-gray-700 dark:text-gray-300">
            <p>Include this API key in the header of your requests to the Research Computer API:</p>
            <div class="bg-gray-200 dark:bg-gray-900 p-3 rounded-md overflow-x-auto">
              <pre><code class="text-sm">Authorization: Bearer <span id="headerApiKey">your-api-key</span></code></pre>
            </div>
            
            <p>Example Python request:</p>
            <div class="bg-gray-200 dark:bg-gray-900 p-3 rounded-md overflow-x-auto">
              <pre><code class="text-sm" id="pythonApiKey">test</code></pre>
            </div>
          </div>
        </div>
      </div>
      
      <div class="animate p-6 bg-gray-100 dark:bg-gray-800 rounded-lg shadow-md">
        <h2 class="text-xl font-semibold text-black dark:text-white mb-3">API Key Security</h2>
        <div class="space-y-3 text-gray-700 dark:text-gray-300">
          <p>⚠️ <span class="font-semibold">Keep your API key secure</span>. Do not share it publicly or include it in client-side code.</p>
          <p>If you believe your API key has been compromised, please contact support to reset it.</p>
        </div>
      </div>
    </div>
  </Container>
</PageLayout>

<script define:vars={{ session }}>
  // Get the access token from the auth provider
  // This would be set during the login process
  async function getAccessToken() {
    // In a real application, you would get this from your auth library
    // For this example, we'll simulate by returning a mock token
    // Typically this would be stored in localStorage, sessionStorage, or a cookie
    return "eyJhbGciOiJkaXIiLCJlbmMiOiJBMjU2R0NNIiwiaXNzIjoiaHR0cHM6Ly9yZXNlYXJjaGNvbXB1dGVyLmV1LmF1dGgwLmNvbS8ifQ..5gxWfsEs_Fwrb2dP.SJsFRqZbbmH3kj0Jx8_hGhnYAgW6P6PVMy5x_lf8ncpnR09SOoEi-gmidAzeYpebLLwehCVAR6lCSrs4dP3g-ezRq5zaFc1PWdlazj6hKdaE8QwWRwRA3BhLSfOnS_nEmwUMoH94WMW5A4bflRmtUhFINSgZZWkQ8-T4N2kOGlvBtV9Be46RdHIyoXY0TVF7-u3SXpinwv4e5f7F-pj2-dJqI4N8u7g5w6hHOD8WgqmrZXpLL0YWs4fZsYdTLF7PgrwtecXUGBPBAuOJbqykiRcGvVqFptHtAgeISDgBEcKv-jJrXAS_8ZSSQg.fVYYOICxBCzDWk4ZRT99bw"; // Replace with actual access token retrieval
  }
  
  // Function to fetch API key from the server using the access token
  async function fetchApiKey() {
    try {
      const loadingMessage = document.getElementById('loadingMessage');
      const errorMessage = document.getElementById('errorMessage');
      const apiKeyDisplay = document.getElementById('apiKeyDisplay');
      const headerApiKey = document.getElementById('headerApiKey');
      const pythonApiKey = document.getElementById('pythonApiKey');
      
      // Get user details from session
      const userEmail = session?.user?.email || '';
      const userName = session?.user?.name || '';
      
      if (!userEmail) {
        if (loadingMessage) loadingMessage.classList.add('hidden');
        if (errorMessage) errorMessage.classList.remove('hidden');
        if (errorMessage) errorMessage.textContent = "User email not found. Please log out and log in again.";
        return;
      }
      
      // Get access token
      const accessToken = await getAccessToken();
      
      // Send access token to backend for verification
      const response = await fetch('http://localhost:8080/api/auth/verify_token', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          accessToken,
          email: userEmail, // This would be extracted from the token on the backend
          name: userName    // This would be extracted from the token on the backend
        }),
      });
      
      if (!response.ok) {
        throw new Error(`Error: ${response.status}`);
      }
      
      const data = await response.json();
      // Extract API key directly from the response
      const apiKey = data.api_key;
      
      // Update UI with API key
      if (apiKeyDisplay) apiKeyDisplay.value = apiKey;
      if (headerApiKey) headerApiKey.textContent = apiKey;
      
      // Update the Python example
      if (pythonApiKey) {
        pythonApiKey.textContent = `import requests

url = "https://api.researchcomputer.com/v1/chat/completions"
headers = {
    "Authorization": "Bearer ${apiKey}",
    "Content-Type": "application/json"
}
payload = {
    "model": "mistral-7b",
    "messages": [
        {"role": "user", "content": "Hello, how are you?"}
    ]
}

response = requests.post(url, json=payload, headers=headers)
print(response.json())`;
      }
      
      // Hide loading message
      if (loadingMessage) loadingMessage.classList.add('hidden');
    } catch (error) {
      console.error('Error fetching API key:', error);
      const loadingMessage = document.getElementById('loadingMessage');
      const errorMessage = document.getElementById('errorMessage');
      
      if (loadingMessage) loadingMessage.classList.add('hidden');
      if (errorMessage) errorMessage.classList.remove('hidden');
    }
  }
  
  // Copy to clipboard functionality
  document.addEventListener('DOMContentLoaded', () => {
    // Fetch API key on page load
    fetchApiKey();
    
    const copyButton = document.getElementById('copyButton');
    const apiKeyDisplay = document.getElementById('apiKeyDisplay');
    const copyMessage = document.getElementById('copyMessage');
    
    if (copyButton && apiKeyDisplay && copyMessage) {
      copyButton.addEventListener('click', () => {
        // Select the text
        apiKeyDisplay.select();
        
        // Copy to clipboard
        navigator.clipboard.writeText(apiKeyDisplay.value)
          .then(() => {
            // Show success message
            copyMessage.classList.remove('hidden');
            
            // Hide message after 2 seconds
            setTimeout(() => {
              copyMessage.classList.add('hidden');
            }, 2000);
          })
          .catch(err => {
            console.error('Failed to copy: ', err);
            alert('Failed to copy API key to clipboard');
          });
      });
    }
  });
</script>